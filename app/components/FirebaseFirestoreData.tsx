// components/FirebaseFirestoreData.tsx
'use client';
import { useEffect, useState } from 'react';
import { useAuth } from '@clerk/nextjs';
import { doc, getDoc, DocumentData } from 'firebase/firestore';
import { auth, db } from '@/lib/firebase'; // Your client-side Firebase init
import { signInWithCustomToken } from 'firebase/auth';

//1. Define an interface for the shape of firestoreData
//   Customize this to match the actual JSON response from my API.

interface UserFirestoreData extends DocumentData {
  // Example properties
  email?: string;
  createdAt?: Date;
  displayName?: string;
}

export default function FirebaseFirestoreData() {
  const { getToken, isLoaded, isSignedIn, userId } = useAuth();

  const [firestoreData, setFirestoreData] = useState<UserFirestoreData | null>(null);
  //const [firestoreData, setFirestoreData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchFirebaseData = async () => {
      setLoading(true);
      setError(null);
      if (!isLoaded || !isSignedIn || !userId) {
        setLoading(false);
        return;
      }

      try {
        // Get the custom token generated by Clerk's Firebase integration
        const clerkToken = await getToken({ template: 'integration_firebase' });

        if (!clerkToken) {
          throw new Error('Failed to get Clerk Firebase token.');
        }

        // Sign in Firebase Auth with the custom token
        await signInWithCustomToken(auth, clerkToken);

        // Now you can access Firestore securely with Firebase Auth
        const docRef = doc(db, 'users', userId); // Assuming you store user data by Clerk userId
        const docSnap = await getDoc(docRef);

        if (docSnap.exists()) {
          setFirestoreData(docSnap.data());
        } else {
          setFirestoreData({ message: 'No user data found in Firestore.' });
        }
        // Catch the error as 'unknown' and perform a type-safe check.
        // } catch (err: any) {
        //   console.error('Error fetching Firestore data:', err);
        //   setError(err.message || 'Failed to fetch Firestore data.');
      } catch (err) {
        console.error('Error fetching Firestore data:', err);
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError('An unexpected error occured while fetching Firestore data.');
        }
      } finally {
        setLoading(false);
      }
    };

    fetchFirebaseData();
  }, [isLoaded, isSignedIn, userId, getToken]);

  if (loading) return <p>Loading Firestore data...</p>;
  if (error) return <p className="text-red-500">Error: {error}</p>;
  if (!isSignedIn) return <p>Sign in to see Firestore data.</p>;

  return (
    <div>
      <h2>Firestore Data for {userId}:</h2>
      <pre>{JSON.stringify(firestoreData, null, 2)}</pre>
    </div>
  );
}
