#!/bin/bash

# AI Response Time Monitor
# Provides real-time monitoring of AI response performance

echo "🧠 AI Response Time Monitor"
echo "==========================="
echo ""

echo "📋 Instructions for Measuring AI Response Times:"
echo ""
echo "1. 🌐 Open Browser DevTools:"
echo "   - Go to: http://localhost:3000/academic-chat"
echo "   - Press F12 (or Cmd+Option+I on Mac)"
echo "   - Go to Console tab"
echo ""
echo "2. 🔍 Enable Detailed Logging:"
echo "   Paste this JavaScript code in the Console:"
echo ""
echo "   // AI Response Time Monitor"
echo "   window.aiResponseMonitor = {"
echo "     startTime: null,"
echo "     endTime: null,"
echo "     measureResponse: function(message) {"
echo "       this.startTime = Date.now();"
echo "       console.log('[AI-TIMER] 🚀 Request sent at:', new Date().toISOString(), 'Message:', message);"
echo "     },"
echo "     recordResponse: function() {"
echo "       this.endTime = Date.now();"
echo "       const responseTime = this.endTime - this.startTime;"
echo "       console.log('[AI-TIMER] ✅ Response received at:', new Date().toISOString());"
echo "       console.log('[AI-TIMER] ⏱️  Total AI Response Time:', responseTime + 'ms (' + (responseTime/1000).toFixed(2) + ' seconds)');"
echo "       return responseTime;"
echo "     }"
echo "   };"
echo ""
echo "3. 🧪 Test Different Question Types:"
echo ""
echo "   Simple Question (Expected: 3-10 seconds):"
echo "   \"What is 2 + 2?\""
echo ""
echo "   Medium Question (Expected: 8-20 seconds):"
echo "   \"Explain React.js in simple terms\""
echo ""
echo "   Complex Question (Expected: 15-45 seconds):"
echo "   \"Compare machine learning and deep learning with examples\""
echo ""
echo "4. 📊 Monitor Network Tab:"
echo "   - Switch to Network tab in DevTools"
echo "   - Look for requests to /chat or /pdf endpoints"
echo "   - Check the timing breakdown in the request details"
echo ""
echo "5. 📈 Console Logs to Watch:"
echo "   - [CHAT-REQUEST] - When request is sent"
echo "   - [CHAT-RESPONSE] - When response starts"
echo "   - [CHAT-COMPLETE] - When response is fully processed"
echo ""

echo "🔧 Environment Status:"
echo ""
# Check if services are running
if curl -s http://localhost:3000 > /dev/null; then
    echo "✅ Frontend: http://localhost:3000 (Ready for testing)"
else
    echo "❌ Frontend not running"
    echo "   Start with: cd frontend && npm run dev"
fi

if curl -s http://localhost:5050 > /dev/null; then
    echo "✅ Backend: http://localhost:5050 (Ready for AI requests)"
elif curl -s http://localhost:5000 > /dev/null; then
    echo "✅ Backend: http://localhost:5000 (Ready for AI requests)"  
else
    echo "❌ Backend not running"
    echo "   Start with: cd backend/functions && npx ts-node src/local-server.ts"
fi

echo ""
echo "🎯 Expected Response Times:"
echo "   • Simple questions: 3-10 seconds"
echo "   • Medium questions: 8-20 seconds"
echo "   • Complex questions: 15-45 seconds"
echo "   • Maximum timeout: 120 seconds"
echo ""
echo "📝 Performance Tip:"
echo "   Watch both the Console logs and Network tab timing"
echo "   to distinguish between AI processing time and UI rendering time."
echo ""
echo "🚀 Ready to measure AI response times!"
echo "Open: http://localhost:3000/academic-chat"
